version: "3.9"
services:
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - dbdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h 127.0.0.1"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: always

  backend:
    build:
      context: ./agency_backend
      dockerfile: ../Dockerfile.backend
    env_file: .env
    environment:
      DB_ENGINE: ${DB_ENGINE}
      SQLITE_PATH: ${SQLITE_PATH}
      POSTGRES_HOST: db
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - data:/data/agency
      - ./agency_backend:/app
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://127.0.0.1:8000/health || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 10
    restart: always

  frontend:
    build:
      context: ./agency_frontend
      dockerfile: ../Dockerfile.frontend
    depends_on:
      backend:
        condition: service_healthy
    restart: always

  nginx:
    image: nginx:1.27-alpine
    env_file: .env
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - certs:/etc/letsencrypt
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      frontend:
        condition: service_started
    restart: always

volumes:
  data:
  dbdata:
  certs:
